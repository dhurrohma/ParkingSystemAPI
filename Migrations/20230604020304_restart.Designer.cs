// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ParkingSystemApi.Data;

#nullable disable

namespace ParkingSystemApi.Migrations
{
    [DbContext(typeof(ParkingDbContext))]
    [Migration("20230604020304_restart")]
    partial class restart
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ParkingSystemApi.Models.Owner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("VehicleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId")
                        .IsUnique();

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("ParkingSystemApi.Models.ParkingHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CheckInTime")
                        .HasColumnType("timestamptz");

                    b.Property<DateTime?>("CheckOutTime")
                        .HasColumnType("timestamptz");

                    b.Property<int?>("VehicleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("ParkingHistories");
                });

            modelBuilder.Entity("ParkingSystemApi.Models.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PlatNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("ParkingSystemApi.Models.VehicleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("VehicleTypes");
                });

            modelBuilder.Entity("VehicleVehicleType", b =>
                {
                    b.Property<int>("VehicleId")
                        .HasColumnType("integer");

                    b.Property<int>("VehicleTypeId")
                        .HasColumnType("integer");

                    b.HasKey("VehicleId", "VehicleTypeId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("VehicleVehicleType");
                });

            modelBuilder.Entity("ParkingSystemApi.Models.Owner", b =>
                {
                    b.HasOne("ParkingSystemApi.Models.Vehicle", "Vehicle")
                        .WithOne("Owner")
                        .HasForeignKey("ParkingSystemApi.Models.Owner", "VehicleId");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("ParkingSystemApi.Models.ParkingHistory", b =>
                {
                    b.HasOne("ParkingSystemApi.Models.Vehicle", "Vehicle")
                        .WithMany("ParkingHistories")
                        .HasForeignKey("VehicleId");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("VehicleVehicleType", b =>
                {
                    b.HasOne("ParkingSystemApi.Models.Vehicle", null)
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_VehicleVehicleType_Vehicles_VehicleId");

                    b.HasOne("ParkingSystemApi.Models.VehicleType", null)
                        .WithMany()
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_VehicaleVehicaleType_VehicleTypes_VehicleTypeId");
                });

            modelBuilder.Entity("ParkingSystemApi.Models.Vehicle", b =>
                {
                    b.Navigation("Owner")
                        .IsRequired();

                    b.Navigation("ParkingHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
